definitions:
  # mac_mini_m1: &mac_mini_m1
  #  instance_type: mac_mini_m1
  # max_build_duration: 60

  environment:
    app_details:
      vars:
        APP_NAME: $APP_NAME
        ORG_NAME: $ORG_NAME
        SPLASH: $SPLASH
        LOGO_URL: $LOGO_URL
        WEB_URL: $WEB_URL
        url: $WEB_URL
        firebase_config_android: $firebase_config_android
        PKG_NAME: $PKG_NAME
        EMAIL_ID: $EMAIL_ID
        PUSH_NOTIFY: $PUSH_NOTIFY
        IS_CAMERA: $IS_CAMERA
        IS_LOCATION: $IS_LOCATION
        IS_MIC: $IS_MIC
        IS_NOTIFICATION: $IS_NOTIFICATION
        IS_CONTACT: $IS_CONTACT
        IS_SMS: $IS_SMS
        IS_PHONE: $IS_PHONE
        IS_BLUETOOTH: $IS_BLUETOOTH

  artifacts:
    #- &ipa_file build/ios/ipa/*.ipa
    #- &xcode_log /tmp/xcodebuild_logs/*.log
    #- &dsym $HOME/Library/Developer/Xcode/DerivedData/**/Build/**/*.dSYM
    # - &app $HOME/Library/Developer/Xcode/DerivedData/**/Build/**/*.app
    #    - &android_abb build/**/outputs/**/*.aab
    - &android_apk build/**/outputs/**/*.apk
    #- &android_mapping_txt build/**/outputs/**/mapping.txt
    #3- &flutter_drive_log flutter_drive.log

  email_release: &email_release
    email:
      recipients:
        - $EMAIL_ID
        # - thamaraikannan137@gmail.com
      notify:
        success: true
        failure: true

  scripts:
    - &pub_get
      name: Get packages
      script: |
        flutter pub get

    - &debug_env
      name: Debug Environment Variables
      script: |
        echo "APP_NAME: $APP_NAME"
        echo "ORG_NAME: $ORG_NAME"
        echo "WEB_URL: $WEB_URL"
        echo "SPLASH: $SPLASH"
        echo "firebase_config_android: $firebase_config_android"
        echo "PKG_NAME: $PKG_NAME"
        echo "EMAIL_ID: $EMAIL_ID"
        echo "PUSH_NOTIFY: $PUSH_NOTIFY"
         echo "IS_CAMERA: $IS_CAMERA"
          echo "IS_LOCATION: $IS_LOCATION"
          echo "IS_MIC: $IS_MIC"
          echo "IS_NOTIFICATION: $IS_NOTIFICATION"
          echo "IS_CONTACT: $IS_CONTACT"
          echo "IS_SMS: $IS_SMS"
          echo "IS_PHONE: $IS_PHONE"
          echo "IS_BLUETOOTH: $IS_BLUETOOTH"
  

  

    - &Inject_Firebase
      name: Inject Firebase and buildscript block
      script: |
        if [ "$PUSH_NOTIFY" = "true" ]; then
            echo "📦 Enabling Firebase integration..."

            # Inject Firebase classpath only if not present
            if ! grep -q "com.google.gms:google-services" android/build.gradle; then
            echo "✅ Injecting Firebase classpath into android/build.gradle..."

            if ! grep -q "buildscript {" android/build.gradle; then
              # No buildscript block at all – add it to the top
              sed -i '1s;^;buildscript {\n  repositories {\n    google()\n    mavenCentral()\n  }\n  dependencies {\n    classpath "com.google.gms:google-services:4.3.15"\n  }\n}\n\n;' android/build.gradle
              echo "✅ Full buildscript block injected"
            else
              # buildscript exists, just insert classpath line
              sed -i '/buildscript {/,/}/ s/dependencies {/dependencies {\n    classpath "com.google.gms:google-services:4.3.15"/' android/build.gradle
              echo "✅ Firebase classpath inserted into existing buildscript"
            fi
          fi

            if ! grep -q "com.google.gms:google-services" android/build.gradle; then
              sed -i '/dependencies {/a\
              classpath '\''com.google.gms:google-services:4.3.15'\''\
              ' android/build.gradle
              echo "✅ Firebase classpath added to android/build.gradle"
            fi
               else
            echo "🚫 Firebase config skipped (PUSH_NOTIFY is not true)"
          fi
    - &get_json
      name: Get JSON file
      script: |
       if [ "$PUSH_NOTIFY" = "true" ]; then
          echo "📥 Downloading google-services.json..."
          wget -O android/app/google-services.json "$firebase_config_android"
          wget -O assets/google-services.json "$firebase_config_android"
        else
          echo "🚫 Firebase config skipped (PUSH_NOTIFY is not true)"
        fi

    - &read_json
          name: Read JSON file
          script: |
            if [ "$PUSH_NOTIFY" = "true" ]; then
              echo "📖 Reading google-services.json..."
              apt-get update && apt-get install -y jq

              if [ ! -f android/app/google-services.json ]; then
                echo "❌ google-services.json missing!"
                exit 1
              fi

              cat android/app/google-services.json

              export API_KEY=$(jq -r '.client[0].api_key[0].current_key' android/app/google-services.json)
              export APP_ID=$(jq -r '.client[0].client_info.mobilesdk_app_id' android/app/google-services.json)
              export PROJECT_ID=$(jq -r '.project_info.project_id' android/app/google-services.json)
              export MESSAGING_SENDER_ID=$(jq -r '.project_info.project_number' android/app/google-services.json)
              export STORAGE_BUCKET=$(jq -r '.project_info.storage_bucket' android/app/google-services.json)

              echo "export API_KEY=$API_KEY" >> $CM_ENV
              echo "export APP_ID=$APP_ID" >> $CM_ENV
              echo "export PROJECT_ID=$PROJECT_ID" >> $CM_ENV
              echo "export MESSAGING_SENDER_ID=$MESSAGING_SENDER_ID" >> $CM_ENV
              echo "export STORAGE_BUCKET=$STORAGE_BUCKET" >> $CM_ENV

              echo "✅ Firebase config exported"
            else
              echo "🚫 Firebase config skipped (PUSH_NOTIFY is not true)"
            fi


    # - &read_json
    #   name: Read JSON file
    #   script: |
    #      if [ "$PUSH_NOTIFY" = "true" ]; then
    #       echo "📖 Reading google-services.json..."

    #       apt-get update && apt-get install -y jq

    #       if [ ! -f android/app/google-services.json ]; then
    #         echo "❌ google-services.json missing!"
    #         exit 1
    #       fi

    #       cat android/app/google-services.json

    #       API_KEY=$(jq -r '.client[0].api_key[0].current_key' android/app/google-services.json)
    #       APP_ID=$(jq -r '.client[0].client_info.mobilesdk_app_id' android/app/google-services.json)
    #       PROJECT_ID=$(jq -r '.project_info.project_id' android/app/google-services.json)
    #       MESSAGING_SENDER_ID=$(jq -r '.project_info.project_number' android/app/google-services.json)
    #       STORAGE_BUCKET=$(jq -r '.project_info.storage_bucket' android/app/google-services.json)

    #         echo "✅ Extracted Firebase Config:"
    #         echo "🔑 API_KEY: $API_KEY"
    #         echo "📱 APP_ID: $APP_ID"
    #         echo "📦 PROJECT_ID: $PROJECT_ID"
    #         echo "📨 MESSAGING_SENDER_ID: $MESSAGING_SENDER_ID"
    #         echo "🪣 STORAGE_BUCKET: $STORAGE_BUCKET"
    #       else
    #         echo "🚫 Firebase config skipped (PUSH_NOTIFY is not true)"
    #       fi

    - &update_sdkver
      name: Updating SDK version
      script: |
        if [ "$PUSH_NOTIFY" = "true" ]; then
          echo "🔧 Updating minSdkVersion and targetSdkVersion..."

          # Make sure to handle in-place edit properly for both macOS and Linux
          sed -i.bak 's/minSdkVersion\s*=.*$/minSdkVersion 21/' android/app/build.gradle
          sed -i.bak 's/targetSdkVersion\s*=.*$/targetSdkVersion 34/' android/app/build.gradle

          echo "✅ SDK versions updated"
        else
          echo "🚫 Firebase config skipped (PUSH_NOTIFY is not true)"
        fi


    - &build_app
      name: Building App with Feature Flags
      script: |
          echo "✅ Start Building APK...."
          flutter clean
          flutter pub get
          
          if [ "$PUSH_NOTIFY" = "true" ]; then
            flutter build apk --release \
              --dart-define=WEB_URL="$WEB_URL" \
              --dart-define=PUSH_NOTIFY="$PUSH_NOTIFY" \
              --dart-define=IS_CAMERA="$IS_CAMERA" \
              --dart-define=IS_LOCATION="$IS_LOCATION" \
              --dart-define=IS_MIC="$IS_MIC" \
              --dart-define=IS_NOTIFICATION="$IS_NOTIFICATION" \
              --dart-define=IS_CONTACT="$IS_CONTACT" \
              --dart-define=IS_SMS="$IS_SMS" \
              --dart-define=IS_PHONE="$IS_PHONE" \
              --dart-define=IS_BLUETOOTH="$IS_BLUETOOTH" > flutter_build.log
              echo "✅ Build APK Compleated...."
          else
            flutter build apk --release \
              --dart-define=WEB_URL="$WEB_URL" \
              --dart-define=PUSH_NOTIFY="$PUSH_NOTIFY" \
              --dart-define=IS_CAMERA="$IS_CAMERA" \
              --dart-define=IS_LOCATION="$IS_LOCATION" \
              --dart-define=IS_MIC="$IS_MIC" \
              --dart-define=IS_NOTIFICATION="$IS_NOTIFICATION" \
              --dart-define=IS_CONTACT="$IS_CONTACT" \
              --dart-define=IS_SMS="$IS_SMS" \
              --dart-define=IS_PHONE="$IS_PHONE" \
              --dart-define=IS_BLUETOOTH="$IS_BLUETOOTH" > flutter_build.log
              echo "✅ Build APK Compleated...."
          fi  
    # - &build_app
    #   name: Building App
    #   script: |
    #    if [ "$PUSH_NOTIFY" = "true" ]; then
    #    echo "✅ Start Building APK...."
    #       flutter clean
    #       flutter pub get
    #       flutter build apk --release \
    #       --dart-define=WEB_URL="$WEB_URL" \
    #       --dart-define=PUSH_NOTIFY="$PUSH_NOTIFY" \
    #       --dart-define=FIREBASE_API_KEY="$API_KEY" \
    #       --dart-define=FIREBASE_APP_ID="$APP_ID" \
    #       --dart-define=FIREBASE_PROJECT_ID="$PROJECT_ID" \
    #       --dart-define=FIREBASE_MESSAGING_SENDER_ID="$MESSAGING_SENDER_ID" \
    #       --dart-define=FIREBASE_STORAGE_BUCKET="$STORAGE_BUCKET"  > flutter_build.log
    #     echo "✅ Build APK Compleated...."
      
    #       # echo "🔍 Searching for FCM Token in build logs..."
    #       # FCM_TOKEN=$(grep 'FCM Token:' flutter_build.log | awk -F':' '{print $2}' | xargs)

    #       # if [ -n "$FCM_TOKEN" ]; then
    #       #   echo "FCM Token for $APP_ID at $(date): $FCM_TOKEN" > fcm_token.txt
    #       #   # echo "✅ FCM Token Found: $FCM_TOKEN"
    #       #   # echo "📩 FCM Token: $FCM_TOKEN" > fcm_token.txt

    #       #   echo "📧 Sending FCM token to $EMAIL_ID"
    #       #   curl -s --url 'smtps://smtp.gmail.com:465' --ssl-reqd \
    #       #     --mail-from "$EMAIL_ID" \
    #       #     --mail-rcpt "$EMAIL_ID" \
    #       #     --upload-file fcm_token.txt \
    #       #     --user "$EMAIL_ID:$EMAIL_PASSWORD" \
    #       #     --insecure

    #       #   echo "✅ Email sent successfully!"
    #       # else
    #       #   echo "⚠️ FCM Token not found in build logs!"
    #       # fi           
    #     else
    #         flutter clean
    #         flutter pub get
    #         flutter build apk  --debug --dart-define=WEB_URL="$WEB_URL" --dart-define=PUSH_NOTIFY="$PUSH_NOTIFY"
    #       fi
       
    - &get_logo
      name: Get logo image from logoUrl
      script: |
        mkdir -p assets/images/
        wget -O assets/images/logo.png $LOGO_URL
        flutter pub get

    - &get_splash
      name: Get splash screen image from splash image from Url
      script: |
        mkdir -p assets/images/
        wget -O assets/images/splash.png $SPLASH
        flutter pub get

    - &set_launcher_icons
      name: Generate Launcher Icons
      script: |
        flutter pub run flutter_launcher_icons:main
        flutter pub get
    - &set_splash_icons
      name: Add splash screen to build
      script: |
        flutter pub run flutter_native_splash:create
        flutter pub get


    - &change_app_name
      name: Change app name
      script: |
        flutter pub run rename setAppName --value "$APP_NAME"
        flutter pub get
    #
    #    - &build_abb
    #      name: Build ABB
    #      script: |
    #        flutter build appbundle --release --dart-define=WEB_URL=$WEB_URL

    

    - &build_debug_apk
      name: Build APK
      script: |
        flutter clean
        flutter pub get
        flutter build apk --debug --dart-define=WEB_URL="$WEB_URL" --dart-define=PUSH_NOTIFY="$PUSH_NOTIFY"


    - &build_release_apk
      name: Build APK
      script: |
        flutter clean
        flutter pub get
        flutter build apk --release --dart-define=WEB_URL="$WEB_URL" --dart-define=PUSH_NOTIFY="$PUSH_NOTIFY"


    - &update_android_package
      name: Update Android Package Name
      script: |
        echo "Updating Android package name..."

        # Convert ORG_NAME and APP_NAME to lowercase and remove spaces/underscores
        CLEANED_ORG_NAME=$(echo "$ORG_NAME" | tr '[:upper:]' '[:lower:]' | tr -d ' _')
        CLEANED_APP_NAME=$(echo "$APP_NAME" | tr '[:upper:]' '[:lower:]' | tr -d ' _')

        # Construct valid package name
        # PACKAGE_NAME="com.${CLEANED_ORG_NAME}.${CLEANED_APP_NAME}"
        # Prefer PKG_NAME if available
        if [ -n "$PKG_NAME" ]; then
        PACKAGE_NAME="$PKG_NAME"
        else
          PACKAGE_NAME="${CLEANED_ORG_NAME}.${CLEANED_APP_NAME}"
        fi

        # Validate package name format
        if [[ ! "$PACKAGE_NAME" =~ ^[a-zA-Z_][a-zA-Z0-9]*(\.[a-zA-Z_][a-zA-Z0-9]*)+$ ]]; then
          echo "❌ ERROR: Invalid package name: $PACKAGE_NAME"
          exit 1
        fi

        echo "✔ Package name: $PACKAGE_NAME"

        flutter pub run rename setBundleId  --value "$PACKAGE_NAME"

        # Update AndroidManifest.xml
        sed -i '' "s/package=\"[^\"]*\"/package=\"$PACKAGE_NAME\"/g" android/app/src/main/AndroidManifest.xml

        # Update applicationId in build.gradle
        sed -i '' "s/applicationId \"[^\"]*\"/applicationId \"$PACKAGE_NAME\"/g" android/app/build.gradle

        echo "✔ Package name updated to: $PACKAGE_NAME"



workflows:
  android-workflow:
    name: Android Workflow
    max_build_duration: 65
    instance_type: mac_mini_m1
    environment:
      flutter: stable
    scripts:
      - *pub_get
      - *debug_env
      - *update_android_package  
      - *get_logo
      - *set_launcher_icons
      - *get_splash
      - *set_splash_icons
      - *change_app_name
      - *Inject_Firebase
      - *get_json
      # - *read_json
      - *update_sdkver
      - *build_app
      # - *build_release_apk
      # - *build_abb
      # - *build_debug_apk
    artifacts:
      - *android_apk
      - flutter_build.log
      - fcm_token.txt
    #        - *android_abb
    publishing: *email_release
  android-release-workflow:
    name: Android release Workflow
    max_build_duration: 65
    instance_type: mac_mini_m2
    environment:
      flutter: stable
    scripts:
      - *pub_get
      - *debug_env
      - *update_android_package  
      - *get_logo
      - *set_launcher_icons
      - *get_splash
      - *set_splash_icons
      - *change_app_name
      - *Inject_Firebase
      # - *build_release_apk
    # - *build_abb
#     - *build_debug_apk
    artifacts:
      - *android_apk
    #        - *android_abb
    publishing: *email_release
