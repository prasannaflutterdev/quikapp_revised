definitions:
  # mac_mini_m1: &mac_mini_m1
  #  instance_type: mac_mini_m1
  # max_build_duration: 60

  environment:
    app_details:
      vars:
        VERSION_NAME: $VERSION_NAME
        VERSION_CODE: $VERSION_CODE
        KEY_STORE: $KEY_STORE
        CM_KEYSTORE_PASSWORD: $CM_KEYSTORE_PASSWORD
        CM_KEY_ALIAS: $CM_KEY_ALIAS
        CM_KEY_PASSWORD: $CM_KEY_PASSWORD
        APP_NAME: $APP_NAME
        ORG_NAME: $ORG_NAME
        IS_SPLASH: $IS_SPLASH
        SPLASH: $SPLASH
        SPLASH_BG: $SPLASH_BG
        SPLASH_BG_COLOR: $SPLASH_BG_COLOR
        SPLASH_TAGLINE: $SPLASH_TAGLINE
        SPLASH_TAGLINE_COLOR: $SPLASH_TAGLINE_COLOR
        SPLASH_ANIMATION: $SPLASH_ANIMATION
        SPLASH_DURATION: $SPLASH_DURATION
        LOGO_URL: $LOGO_URL
        WEB_URL: $WEB_URL
        url: $WEB_URL
        firebase_config_android: $firebase_config_android
        PKG_NAME: $PKG_NAME
        EMAIL_ID: $EMAIL_ID
        PUSH_NOTIFY: $PUSH_NOTIFY
        IS_CAMERA: $IS_CAMERA
        IS_LOCATION: $IS_LOCATION
        IS_MIC: $IS_MIC
        IS_NOTIFICATION: $IS_NOTIFICATION
        IS_CONTACT: $IS_CONTACT
        IS_BIOMETRIC: $IS_BIOMETRIC
        IS_CALENDAR: $IS_CALENDAR
        IS_STORAGE: "true" # Always true by default
        IS_PULLDOWN: $IS_PULLDOWN
        IS_BOTTOMMENU: $IS_BOTTOMMENU
        BOTTOMMENU_ITEMS: $BOTTOMMENU_ITEMS
        BOTTOMMENU_BG_COLOR: $BOTTOMMENU_BG_COLOR
        BOTTOMMENU_ICON_COLOR: $BOTTOMMENU_ICON_COLOR
        BOTTOMMENU_TEXT_COLOR: $BOTTOMMENU_TEXT_COLOR
        BOTTOMMENU_ACTIVE_TAB_COLOR: $BOTTOMMENU_ACTIVE_TAB_COLOR
        BOTTOMMENU_ICON_POSITION: $BOTTOMMENU_ICON_POSITION
        BOTTOMMENU_VISIBLE_ON: $BOTTOMMENU_VISIBLE_ON

  artifacts:
    #- &ipa_file build/ios/ipa/*.ipa
    #- &xcode_log /tmp/xcodebuild_logs/*.log
    #- &dsym $HOME/Library/Developer/Xcode/DerivedData/**/Build/**/*.dSYM
    # - &app $HOME/Library/Developer/Xcode/DerivedData/**/Build/**/*.app
    - &android_abb build/**/outputs/**/*.aab
    - &android_apk build/**/outputs/**/*.apk
#    - &ios_app build/ios/ipa/*.ipa
    #- &android_mapping_txt build/**/outputs/**/mapping.txt
    #3- &flutter_drive_log flutter_drive.log

  email_release: &email_release
    email:
      recipients:
        - $EMAIL_ID
        # - thamaraikannan137@gmail.com
      notify:
        success: true
        failure: true

  scripts:
    - &pub_get
      name: Get packages
      script: |
        flutter pub get

    - &debug_env
      name: Debug Environment Variables
      script: |
        echo "VERSION_NAME: $VERSION_NAME"           
        echo "VERSION_CODE: $VERSION_CODE" 
        echo "KEY_STORE: $KEY_STORE"
        echo "CM_KEYSTORE_PASSWORD: $CM_KEYSTORE_PASSWORD"
        echo "CM_KEY_ALIAS: $CM_KEY_ALIAS"
        echo "CM_KEY_PASSWORD: $CM_KEY_PASSWORD"
        echo "APP_NAME: $APP_NAME"
        echo "ORG_NAME: $ORG_NAME"
        echo "WEB_URL: $WEB_URL"
        echo "IS_SPLASH: $IS_SPLASH"
        echo "SPLASH: $SPLASH"
        echo "SPLASH_BG:$SPLASH_BG"
        echo "SPLASH_BG_COLOR: $SPLASH_BG_COLOR"
        echo "SPLASH_TAGLINE: $SPLASH_TAGLINE"
        echo "SPLASH_TAGLINE_COLOR: $SPLASH_TAGLINE_COLOR"
        echo "SPLASH_ANIMATION: $SPLASH_ANIMATION"
        echo "SPLASH_DURATION: $SPLASH_DURATION"
        echo "firebase_config_android: $firebase_config_android"
        echo "PKG_NAME: $PKG_NAME"
        echo "EMAIL_ID: $EMAIL_ID"
        echo "PUSH_NOTIFY: $PUSH_NOTIFY"
        echo "IS_CAMERA: $IS_CAMERA"
        echo "IS_LOCATION: $IS_LOCATION"
        echo "IS_MIC: $IS_MIC"
        echo "IS_NOTIFICATION: $IS_NOTIFICATION"
        echo "IS_CONTACT: $IS_CONTACT"
        echo "IS_BIOMETRIC: $IS_BIOMETRIC"
        echo "IS_CALENDAR: $IS_CALENDAR"
        echo "IS_PULLDOWN: $IS_PULLDOWN"
        echo "IS_BOTTOMMENU: $IS_BOTTOMMENU"
        echo "BOTTOMMENU_ITEMS: $BOTTOMMENU_ITEMS"
        echo "BOTTOMMENU_BG_COLOR: $BOTTOMMENU_BG_COLOR"  
        echo "BOTTOMMENU_ICON_COLOR: $BOTTOMMENU_ICON_COLOR"
        echo "BOTTOMMENU_TEXT_COLOR: $BOTTOMMENU_TEXT_COLOR"
        echo "BOTTOMMENU_ACTIVE_TAB_COLOR: $BOTTOMMENU_ACTIVE_TAB_COLOR"
        echo "BOTTOMMENU_ICON_POSITION: $BOTTOMMENU_ICON_POSITION"
        echo "BOTTOMMENU_VISIBLE_ON: $BOTTOMMENU_VISIBLE_ON"


    - &get_splash
      name: Get splash screen image from splash image from Url
      script: |
        if [ "$IS_SPLASH" = "true" ]; then
          echo "üöÄ Started: Downloading splash assets"
        
          mkdir -p assets/images/
        
          # Download splash logo
          echo "‚¨áÔ∏è Downloading splash logo from: $SPLASH"
          wget -O assets/images/splash.png "$SPLASH"
          if [ $? -ne 0 ]; then
          echo "‚ùå Error: Failed to download SPLASH logo"
          exit 1
          fi
        
          # Download splash background (optional)
          if [ -n "$SPLASH_BG" ]; then
          echo "‚¨áÔ∏è Downloading splash background from: $SPLASH_BG"
          wget -O assets/images/splash_bg.png "$SPLASH_BG"
          if [ $? -ne 0 ]; then
          echo "‚ùå Error: Failed to download SPLASH background"
          exit 1
          fi
          else
          echo "‚ÑπÔ∏è No SPLASH_BG provided, skipping background download"
          fi
        
          flutter pub get
          echo "‚úÖ Completed: Splash assets downloaded"
          
          else
          echo "‚è≠Ô∏è Skipping splash asset download (IS_SPLASH != true)"
          fi

    - &Inject_Firebase
      name: Inject Firebase and buildscript block
      script: |
        if [ "$PUSH_NOTIFY" = "true" ]; then
          echo "üì¶ Enabling Firebase integration..."

          # Check if Firebase classpath is already present
          if ! grep -q 'com.google.gms:google-services' android/build.gradle; then
            echo "‚úÖ Firebase classpath not found, injecting..."

            if ! grep -q 'buildscript {' android/build.gradle; then
              # No buildscript block found ‚Äì inject the entire block at the top
              sed -i '1s;^;buildscript {\n  repositories {\n    google()\n    mavenCentral()\n  }\n  dependencies {\n    classpath "com.google.gms:google-services:4.3.15"\n  }\n}\n\n;' android/build.gradle
              echo "‚úÖ Full buildscript block injected"
            else
              # buildscript exists ‚Äì insert the classpath into the dependencies
              sed -i '/buildscript {/,/}/ s/dependencies {/dependencies {\n    classpath "com.google.gms:google-services:4.3.15"/' android/build.gradle
              echo "‚úÖ Firebase classpath inserted into existing buildscript"
            fi
          else
            echo "‚úÖ Firebase classpath already present, skipping injection"
          fi
        else
          echo "üö´ Firebase config skipped (PUSH_NOTIFY is not true)"
        fi
#    - &Inject_Firebase
#      name: Inject Firebase and buildscript block
#      script: |
#        if [ "$PUSH_NOTIFY" = "true" ]; then
#            echo "üì¶ Enabling Firebase integration..."
#
#            # Inject Firebase classpath only if not present
#            if ! grep -q "com.google.gms:google-services" android/build.gradle; then
#            echo "‚úÖ Injecting Firebase classpath into android/build.gradle..."
#
#            if ! grep -q "buildscript {" android/build.gradle; then
#              # No buildscript block at all ‚Äì add it to the top
#              sed -i '1s;^;buildscript {\n  repositories {\n    google()\n    mavenCentral()\n  }\n  dependencies {\n    classpath "com.google.gms:google-services:4.3.15"\n  }\n}\n\n;' android/build.gradle
#              echo "‚úÖ Full buildscript block injected"
#            else
#              # buildscript exists, just insert classpath line
#              sed -i '/buildscript {/,/}/ s/dependencies {/dependencies {\n    classpath "com.google.gms:google-services:4.3.15"/' android/build.gradle
#              echo "‚úÖ Firebase classpath inserted into existing buildscript"
#            fi
#          fi
#
#            if ! grep -q "com.google.gms:google-services" android/build.gradle; then
#              sed -i '/dependencies {/a\
#              classpath '\''com.google.gms:google-services:4.3.15'\''\
#              ' android/build.gradle
#              echo "‚úÖ Firebase classpath added to android/build.gradle"
#            fi
#               else
#            echo "üö´ Firebase config skipped (PUSH_NOTIFY is not true)"
#          fi
    - &get_json
      name: Get JSON file
      script: |
       if [ "$PUSH_NOTIFY" = "true" ]; then
          echo "üì• Downloading google-services.json..."
          wget -O android/app/google-services.json "$firebase_config_android"
          wget -O assets/google-services.json "$firebase_config_android"
        else
          echo "üö´ Firebase config skipped (PUSH_NOTIFY is not true)"
        fi

    - &update_sdkver
      name: Updating SDK version
      script: |
        if [ "$PUSH_NOTIFY" = "true" ]; then
          echo "üîß Updating minSdkVersion and targetSdkVersion..."

          # Make sure to handle in-place edit properly for both macOS and Linux
          sed -i.bak 's/minSdkVersion\s*=.*$/minSdkVersion 21/' android/app/build.gradle
          sed -i.bak 's/targetSdkVersion\s*=.*$/targetSdkVersion 34/' android/app/build.gradle

          echo "‚úÖ SDK versions updated"
        else
          echo "üö´ Firebase config skipped (PUSH_NOTIFY is not true)"
        fi
    - &update_appversion
      name: Inject version info into build.gradle (fallback)
      script: |
        echo "üîÑ Updating Flutter pubspec version... ${VERSION_NAME}+${VERSION_CODE}"
        flutter pub version $VERSION_NAME+$VERSION_CODE
  
        echo "üîç Injecting versionCode: ${VERSION_CODE} into build.gradle"
        sed -i'' -e "s/versionCode.*/versionCode ${VERSION_CODE}/" android/app/build.gradle
  
        echo "üîç Injecting versionName: ${VERSION_NAME} into build.gradle"
        sed -i'' -e "s/versionName \".*\"/versionName \"${VERSION_NAME}\"/" android/app/build.gradle
  
        echo "‚úÖ Version update complete: $VERSION_NAME ($VERSION_CODE)"


    - &get_logo
      name: Get logo image from logoUrl
      script: |
        echo "üöÄ Started: Downloading logo from $LOGO_URL"
            mkdir -p assets/images/
            wget -O assets/images/logo.png $LOGO_URL
            if [ $? -ne 0 ]; then
              echo "‚ùå Error: Failed to download logo"
              exit 1
            fi
            flutter pub get
            echo "‚úÖ Completed: Logo downloaded"



    - &set_launcher_icons
      name: Generate Launcher Icons
      script: |
        flutter pub run flutter_launcher_icons:main
        flutter pub get


    - &change_app_name
      name: Change app name
      script: |
        flutter pub run rename setAppName --value "$APP_NAME"
        flutter pub get

    - &key_store
      name: Setup Android keystore and insert Gradle signing block
      script: |
        echo "‚úÖ Downloading keystore..."
        curl -o android/app/keystore.jks "$KEY_STORE"
    
        echo "‚úÖ Writing key.properties..."
        cat > android/key.properties <<EOF
        storeFile=keystore.jks
        storePassword=$CM_KEYSTORE_PASSWORD
        keyAlias=$CM_KEY_ALIAS
        keyPassword=$CM_KEY_PASSWORD
        EOF
    
        GRADLE_FILE=android/app/build.gradle
    
        # ‚úÖ Only insert if not already added
        if ! grep -q "def keystoreProperties = new Properties()" $GRADLE_FILE; then
        echo "‚úÖ Injecting keystoreProperties at the top of build.gradle"
        awk '
        BEGIN {
        print "def keystoreProperties = new Properties()"
        print "def keystorePropertiesFile = rootProject.file(\"key.properties\")"
        print "if (keystorePropertiesFile.exists()) {"
        print "    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))"
        print "}"
        print ""
        }
        { print }
        ' $GRADLE_FILE > tmp && mv tmp $GRADLE_FILE
        else
          echo "‚úÖ keystoreProperties already present"
        fi

#    - &update_android_package
#      name: Update Android Package Name
#      script: |
#        echo "Updating Android package name..."
#
#        # Convert ORG_NAME and APP_NAME to lowercase and remove spaces/underscores
#        CLEANED_ORG_NAME=$(echo "$ORG_NAME" | tr '[:upper:]' '[:lower:]' | tr -d ' _')
#        CLEANED_APP_NAME=$(echo "$APP_NAME" | tr '[:upper:]' '[:lower:]' | tr -d ' _')
#
#        # Construct valid package name
#        # PACKAGE_NAME="com.${CLEANED_ORG_NAME}.${CLEANED_APP_NAME}"
#        # Prefer PKG_NAME if available
#        if [ -n "$PKG_NAME" ]; then
#        PACKAGE_NAME="$PKG_NAME"
#        else
#          PACKAGE_NAME="${CLEANED_ORG_NAME}.${CLEANED_APP_NAME}"
#        fi
#
#        # Validate package name format
#        if [[ ! "$PACKAGE_NAME" =~ ^[a-zA-Z_][a-zA-Z0-9]*(\.[a-zA-Z_][a-zA-Z0-9]*)+$ ]]; then
#          echo "‚ùå ERROR: Invalid package name: $PACKAGE_NAME"
#          exit 1
#        fi
#
#        echo "‚úî Package name: $PACKAGE_NAME"
#
#        flutter pub run rename setBundleId  --value "$PACKAGE_NAME"
#
#        # Update AndroidManifest.xml
#        sed -i "s/package=\"[^\"]*\"/package=\"$PACKAGE_NAME\"/g" android/app/src/main/AndroidManifest.xml
#        #sed -i '' "s/package=\"[^\"]*\"/package=\"$PACKAGE_NAME\"/g" android/app/src/main/AndroidManifest.xml
#
#        # Update applicationId in build.gradle
#        sed -i "s/applicationId \"[^\"]*\"/applicationId \"$PACKAGE_NAME\"/g" android/app/build.gradle
#        #sed -i '' "s/applicationId \"[^\"]*\"/applicationId \"$PACKAGE_NAME\"/g" android/app/build.gradle
#
#        echo "‚úî Package name updated to: $PACKAGE_NAME"

    - &update_android_package
      name: Update Android Package Name
      script: |
        echo "Updating Android package name..."
      
        # Validate package name format
        if [[ ! "$PKG_NAME" =~ ^[a-zA-Z_][a-zA-Z0-9]*(\.[a-zA-Z_][a-zA-Z0-9]*)+$ ]]; then
          echo "‚ùå ERROR: Invalid package name: $PKG_NAME"
          exit 1
        fi

        echo "‚úî Package name: $PKG_NAME"

        flutter pub run rename setBundleId  --value "$PKG_NAME"

        # Update AndroidManifest.xml
        sed -i "s/package=\"[^\"]*\"/package=\"$PKG_NAME\"/g" android/app/src/main/AndroidManifest.xml
        #sed -i '' "s/package=\"[^\"]*\"/package=\"$PKG_NAME\"/g" android/app/src/main/AndroidManifest.xml

        # Update applicationId in build.gradle
        sed -i "s/applicationId \"[^\"]*\"/applicationId \"$PKG_NAME\"/g" android/app/build.gradle
        #sed -i '' "s/applicationId \"[^\"]*\"/applicationId \"$PKG_NAME\"/g" android/app/build.gradle

        echo "‚úî Package name updated to: $PKG_NAME"

    - &build_app
      name: Building App with Feature Flags
      script: |
        echo "‚úÖ Start Building APK...."
        flutter clean
        flutter pub get
        flutter build apk --release \
            --dart-define=WEB_URL="$WEB_URL" \
            --dart-define=PUSH_NOTIFY="$PUSH_NOTIFY" \
            --dart-define=PKG_NAME="$PKG_NAME" \
            --dart-define=IS_SPLASH="$IS_SPLASH" \
            --dart-define=SPLASH="$SPLASH" \
            --dart-define=SPLASH_BG="$SPLASH_BG" \
            --dart-define=SPLASH_ANIMATION="$SPLASH_ANIMATION" \
            --dart-define=SPLASH_BG_COLOR="$SPLASH_BG_COLOR" \
            --dart-define=SPLASH_TAGLINE="$SPLASH_TAGLINE" \
            --dart-define=SPLASH_TAGLINE_COLOR="$SPLASH_TAGLINE_COLOR" \
            --dart-define=SPLASH_DURATION="$SPLASH_DURATION" \
            --dart-define=IS_PULLDOWN="$IS_PULLDOWN" \
            --dart-define=IS_BOTTOMMENU="$IS_BOTTOMMENU" \
            --dart-define=BOTTOMMENU_ITEMS="$BOTTOMMENU_ITEMS" \
            --dart-define=BOTTOMMENU_BG_COLOR="$BOTTOMMENU_BG_COLOR" \
            --dart-define=BOTTOMMENU_ICON_COLOR="$BOTTOMMENU_ICON_COLOR" \
            --dart-define=BOTTOMMENU_TEXT_COLOR="$BOTTOMMENU_TEXT_COLOR" \
            --dart-define=BOTTOMMENU_ACTIVE_TAB_COLOR="$BOTTOMMENU_ACTIVE_TAB_COLOR" \
            --dart-define=BOTTOMMENU_ICON_POSITION="$BOTTOMMENU_ICON_POSITION" \
            --dart-define=BOTTOMMENU_VISIBLE_ON="$BOTTOMMENU_VISIBLE_ON" \
            --dart-define=IS_CAMERA="$IS_CAMERA" \
            --dart-define=IS_LOCATION="$IS_LOCATION" \
            --dart-define=IS_BIOMETRIC="$IS_BIOMETRIC" \
            --dart-define=IS_MIC="$IS_MIC" \
            --dart-define=IS_CONTACT="$IS_CONTACT" \
            --dart-define=IS_CALENDAR="$IS_CALENDAR" \
            --dart-define=IS_NOTIFICATION="$IS_NOTIFICATION" \
            --dart-define=IS_STORAGE="$IS_STORAGE" > flutter_build.log
            echo "‚úÖ Build APK Compleated...."
        
        
            echo "‚úÖ Start Building appbundle...."
            flutter build appbundle --release \
            --dart-define=WEB_URL="$WEB_URL" \
            --dart-define=PUSH_NOTIFY="$PUSH_NOTIFY" \
            --dart-define=PKG_NAME="$PKG_NAME" \
            --dart-define=IS_SPLASH="$IS_SPLASH" \
            --dart-define=SPLASH="$SPLASH" \
            --dart-define=SPLASH_BG="$SPLASH_BG" \
            --dart-define=SPLASH_ANIMATION="$SPLASH_ANIMATION" \
            --dart-define=SPLASH_BG_COLOR="$SPLASH_BG_COLOR" \
            --dart-define=SPLASH_TAGLINE="$SPLASH_TAGLINE" \
            --dart-define=SPLASH_TAGLINE_COLOR="$SPLASH_TAGLINE_COLOR" \
            --dart-define=SPLASH_DURATION="$SPLASH_DURATION" \
            --dart-define=IS_PULLDOWN="$IS_PULLDOWN" \
            --dart-define=IS_BOTTOMMENU="$IS_BOTTOMMENU" \
            --dart-define=BOTTOMMENU_ITEMS="$BOTTOMMENU_ITEMS" \
            --dart-define=BOTTOMMENU_BG_COLOR="$BOTTOMMENU_BG_COLOR" \
            --dart-define=BOTTOMMENU_ICON_COLOR="$BOTTOMMENU_ICON_COLOR" \
            --dart-define=BOTTOMMENU_TEXT_COLOR="$BOTTOMMENU_TEXT_COLOR" \
            --dart-define=BOTTOMMENU_ACTIVE_TAB_COLOR="$BOTTOMMENU_ACTIVE_TAB_COLOR" \
            --dart-define=BOTTOMMENU_ICON_POSITION="$BOTTOMMENU_ICON_POSITION" \
            --dart-define=BOTTOMMENU_VISIBLE_ON="$BOTTOMMENU_VISIBLE_ON" \
            --dart-define=IS_CAMERA="$IS_CAMERA" \
            --dart-define=IS_LOCATION="$IS_LOCATION" \
            --dart-define=IS_BIOMETRIC="$IS_BIOMETRIC" \
            --dart-define=IS_MIC="$IS_MIC" \
            --dart-define=IS_CONTACT="$IS_CONTACT" \
            --dart-define=IS_CALENDAR="$IS_CALENDAR" \
            --dart-define=IS_NOTIFICATION="$IS_NOTIFICATION" \
            --dart-define=IS_STORAGE="$IS_STORAGE" > flutter_build2.log
            echo "‚úÖ Build appbundle Compleated...."

workflows:
  android-workflow:
    name: Android Workflow
    max_build_duration: 65
    instance_type: mac_mini_m1
    environment:
      flutter: stable
      xcode: latest
    scripts:
      - *pub_get
      - *debug_env
      - *update_appversion
      - *update_android_package
      - *get_logo
      - *set_launcher_icons
      - *get_splash
#      - *generate_splash_config
#      - *set_splash_icons
      - *change_app_name
      - *Inject_Firebase
      - *key_store
      - *get_json
      # - *read_json
      - *update_sdkver
      - *build_app
      # - *build_release_apk
      # - *build_abb
      # - *build_debug_apk
    artifacts:
      - *android_apk
      - *android_abb
#      - *ios_app
      - flutter_build.log
      - flutter_build2.log
      - fcm_token.txt
    #        - *android_abb
    publishing: *email_release
  android-release-workflow:
    name: Android release Workflow
    max_build_duration: 65
    instance_type: mac_mini_m2
    environment:
      flutter: stable
    scripts:
      - *pub_get
      - *debug_env
      - *update_appversion
      - *update_android_package
      - *get_logo
      - *set_launcher_icons
      - *get_splash
#      - *set_splash_icons
      - *change_app_name
      - *key_store
      - *Inject_Firebase
      # - *build_release_apk
    # - *build_abb
#     - *build_debug_apk
    artifacts:
      - *android_apk
    #        - *android_abb
    publishing: *email_release
