definitions:
  # mac_mini_m1: &mac_mini_m1
  #  instance_type: mac_mini_m1
  # max_build_duration: 60

  environment:
    app_details:
      vars:
        VERSION_NAME: $VERSION_NAME
        VERSION_CODE: $VERSION_CODE
        KEY_STORE: $KEY_STORE
        CM_KEYSTORE_PASSWORD: $CM_KEYSTORE_PASSWORD
        CM_KEY_ALIAS: $CM_KEY_ALIAS
        CM_KEY_PASSWORD: $CM_KEY_PASSWORD
        APP_NAME: $APP_NAME
        ORG_NAME: $ORG_NAME
        IS_SPLASH: $IS_SPLASH
        SPLASH: $SPLASH
        SPLASH_BG: $SPLASH_BG
        SPLASH_BG_COLOR: $SPLASH_BG_COLOR
        SPLASH_TAGLINE: $SPLASH_TAGLINE
        SPLASH_TAGLINE_COLOR: $SPLASH_TAGLINE_COLOR
        SPLASH_ANIMATION: $SPLASH_ANIMATION
        SPLASH_DURATION: $SPLASH_DURATION
        LOGO_URL: $LOGO_URL
        WEB_URL: $WEB_URL
        url: $WEB_URL
        firebase_config_android: $firebase_config_android
        firebase_config_ios: $firebase_config_ios
        APNS_KEY_ID: $APNS_KEY_ID
        APNS_TEAM_ID: $APNS_TEAM_ID
        APNS_AUTH_KEY_URL: $APNS_AUTH_KEY_URL
        PKG_NAME: $PKG_NAME
        EMAIL_ID: $EMAIL_ID
        PUSH_NOTIFY: $PUSH_NOTIFY
        IS_CAMERA: $IS_CAMERA
        IS_LOCATION: $IS_LOCATION
        IS_MIC: $IS_MIC
        IS_NOTIFICATION: $IS_NOTIFICATION
        IS_CONTACT: $IS_CONTACT
        IS_BIOMETRIC: $IS_BIOMETRIC
        IS_CALENDAR: $IS_CALENDAR
        IS_STORAGE: "true" # Always true by default
        IS_PULLDOWN: $IS_PULLDOWN
        IS_BOTTOMMENU: $IS_BOTTOMMENU
        BOTTOMMENU_ITEMS: $BOTTOMMENU_ITEMS
        BOTTOMMENU_BG_COLOR: $BOTTOMMENU_BG_COLOR
        BOTTOMMENU_ICON_COLOR: $BOTTOMMENU_ICON_COLOR
        BOTTOMMENU_TEXT_COLOR: $BOTTOMMENU_TEXT_COLOR
        BOTTOMMENU_ACTIVE_TAB_COLOR: $BOTTOMMENU_ACTIVE_TAB_COLOR
        BOTTOMMENU_ICON_POSITION: $BOTTOMMENU_ICON_POSITION
        BOTTOMMENU_VISIBLE_ON: $BOTTOMMENU_VISIBLE_ON
        flutter_build_flags: >
          --dart-define=WEB_URL="$WEB_URL"
          --dart-define=PUSH_NOTIFY="$PUSH_NOTIFY"
          --dart-define=PKG_NAME="$PKG_NAME"
          --dart-define=IS_SPLASH="$IS_SPLASH"
          --dart-define=SPLASH="$SPLASH"
          --dart-define=SPLASH_BG="$SPLASH_BG"
          --dart-define=SPLASH_ANIMATION="$SPLASH_ANIMATION"
          --dart-define=SPLASH_BG_COLOR="$SPLASH_BG_COLOR"
          --dart-define=SPLASH_TAGLINE="$SPLASH_TAGLINE"
          --dart-define=SPLASH_TAGLINE_COLOR="$SPLASH_TAGLINE_COLOR"
          --dart-define=SPLASH_DURATION="$SPLASH_DURATION"
          --dart-define=IS_PULLDOWN="$IS_PULLDOWN"
          --dart-define=IS_BOTTOMMENU="$IS_BOTTOMMENU"
          --dart-define=BOTTOMMENU_ITEMS="$BOTTOMMENU_ITEMS"
          --dart-define=BOTTOMMENU_BG_COLOR="$BOTTOMMENU_BG_COLOR"
          --dart-define=BOTTOMMENU_ICON_COLOR="$BOTTOMMENU_ICON_COLOR"
          --dart-define=BOTTOMMENU_TEXT_COLOR="$BOTTOMMENU_TEXT_COLOR"
          --dart-define=BOTTOMMENU_ACTIVE_TAB_COLOR="$BOTTOMMENU_ACTIVE_TAB_COLOR"
          --dart-define=BOTTOMMENU_ICON_POSITION="$BOTTOMMENU_ICON_POSITION"
          --dart-define=BOTTOMMENU_VISIBLE_ON="$BOTTOMMENU_VISIBLE_ON"
          --dart-define=IS_CAMERA="$IS_CAMERA"
          --dart-define=IS_LOCATION="$IS_LOCATION"
          --dart-define=IS_BIOMETRIC="$IS_BIOMETRIC"
          --dart-define=IS_MIC="$IS_MIC"
          --dart-define=IS_CONTACT="$IS_CONTACT"
          --dart-define=IS_CALENDAR="$IS_CALENDAR"
          --dart-define=IS_NOTIFICATION="$IS_NOTIFICATION"
          --dart-define=IS_STORAGE="$IS_STORAGE"

  artifacts:
    #- &ipa_file build/ios/ipa/*.ipa
    #- &xcode_log /tmp/xcodebuild_logs/*.log
    #- &dsym $HOME/Library/Developer/Xcode/DerivedData/**/Build/**/*.dSYM
    # - &app $HOME/Library/Developer/Xcode/DerivedData/**/Build/**/*.app
    - &android_abb build/**/outputs/**/*.aab
    - &android_apk build/**/outputs/**/*.apk
    - &ios_app build/ios/ipa/*.ipa
    #- &android_mapping_txt build/**/outputs/**/mapping.txt
    #3- &flutter_drive_log flutter_drive.log

  email_release: &email_release
    email:
      recipients:
        - $EMAIL_ID
      notify:
        success: true
        failure: true

  scripts:
    - &pub_get
      name: Get packages
      script: |
        flutter pub get

    - &debug_env
      name: Debug Environment Variables
      script: |
        echo "\n App Name & Version\n"
        echo "APP_NAME: $APP_NAME"
        echo "ORG_NAME: $ORG_NAME"
        echo "WEB_URL: $WEB_URL"
        echo "VERSION_NAME: $VERSION_NAME"           
        echo "VERSION_CODE: $VERSION_CODE" 
        echo "PKG_NAME: $PKG_NAME"
        
        echo "\n Android Keystore\n"
        echo "KEY_STORE: $KEY_STORE"
        echo "CM_KEYSTORE_PASSWORD: $CM_KEYSTORE_PASSWORD"
        echo "CM_KEY_ALIAS: $CM_KEY_ALIAS"
        echo "CM_KEY_PASSWORD: $CM_KEY_PASSWORD"
        
        echo "\n IOS Keystore\n"
        echo "APNS_KEY_ID: $APNS_KEY_ID"
        echo "APNS_TEAM_ID: $APNS_TEAM_ID"
        echo "APNS_AUTH_KEY_URL: $APNS_AUTH_KEY_URL"
        
        echo "\n Firebase Android config file:\n"
        echo "firebase_config_android: $firebase_config_android"
        echo "\n Firebase IOS config file:\n"
        echo "firebase_config_ios: $firebase_config_ios"
        
        echo "\n Splash Configuration:\n"
        echo "IS_SPLASH: $IS_SPLASH"
        echo "SPLASH: $SPLASH"
        echo "SPLASH_BG:$SPLASH_BG"
        echo "SPLASH_BG_COLOR: $SPLASH_BG_COLOR"
        echo "SPLASH_TAGLINE: $SPLASH_TAGLINE"
        echo "SPLASH_TAGLINE_COLOR: $SPLASH_TAGLINE_COLOR"
        echo "SPLASH_ANIMATION: $SPLASH_ANIMATION"
        echo "SPLASH_DURATION: $SPLASH_DURATION"
        
        echo "\n Push Notification Configuration:\n"
        echo "PUSH_NOTIFY: $PUSH_NOTIFY"
        
        echo "\n Bottom Navigation Configuration:\n"
        echo "IS_BOTTOMMENU: $IS_BOTTOMMENU"
        echo "BOTTOMMENU_ITEMS: $BOTTOMMENU_ITEMS"
        echo "BOTTOMMENU_BG_COLOR: $BOTTOMMENU_BG_COLOR"  
        echo "BOTTOMMENU_ICON_COLOR: $BOTTOMMENU_ICON_COLOR"
        echo "BOTTOMMENU_TEXT_COLOR: $BOTTOMMENU_TEXT_COLOR"
        echo "BOTTOMMENU_ACTIVE_TAB_COLOR: $BOTTOMMENU_ACTIVE_TAB_COLOR"
        echo "BOTTOMMENU_ICON_POSITION: $BOTTOMMENU_ICON_POSITION"
        echo "BOTTOMMENU_VISIBLE_ON: $BOTTOMMENU_VISIBLE_ON"
        
        echo "\n Permissions:\n"
        echo "IS_CAMERA: $IS_CAMERA"
        echo "IS_LOCATION: $IS_LOCATION"
        echo "IS_MIC: $IS_MIC"
        echo "IS_NOTIFICATION: $IS_NOTIFICATION"
        echo "IS_CONTACT: $IS_CONTACT"
        echo "IS_BIOMETRIC: $IS_BIOMETRIC"
        echo "IS_CALENDAR: $IS_CALENDAR"
        
        echo "\n Publish Configuration:\n"
        echo "EMAIL_ID: $EMAIL_ID"
        
        echo "\n Pull Down to Refresh Configuration:\n"
        echo "IS_PULLDOWN: $IS_PULLDOWN"

    - &get_logo
      name: Get logo image from logoUrl
      script: |
        echo "üöÄ Started: Downloading logo from $LOGO_URL"
            mkdir -p assets/images/
            wget -O assets/images/logo.png $LOGO_URL
            if [ $? -ne 0 ]; then
              echo "‚ùå Error: Failed to download logo"
              exit 1
            fi
            flutter pub get
            echo "‚úÖ Completed: Logo downloaded"

    - &set_launcher_icons
      name: Generate Launcher Icons
      script: |
        flutter pub run flutter_launcher_icons:main
        flutter pub get

    - &change_app_name
      name: Change app name
      script: |
        flutter pub run rename setAppName --value "$APP_NAME"
        flutter pub get

    - &get_splash
      name: Get splash screen image from splash image from Url
      script: |
        if [ "$IS_SPLASH" = "true" ]; then
          echo "üöÄ Started: Downloading splash assets"
        
          mkdir -p assets/images/
        
          # Download splash logo
          echo "‚¨áÔ∏è Downloading splash logo from: $SPLASH"
          wget -O assets/images/splash.png "$SPLASH"
          if [ $? -ne 0 ]; then
          echo "‚ùå Error: Failed to download SPLASH logo"
          exit 1
          fi
        
          # Download splash background (optional)
          if [ -n "$SPLASH_BG" ]; then
          echo "‚¨áÔ∏è Downloading splash background from: $SPLASH_BG"
          wget -O assets/images/splash_bg.png "$SPLASH_BG"
          if [ $? -ne 0 ]; then
          echo "‚ùå Error: Failed to download SPLASH background"
          exit 1
          fi
          else
          echo "‚ÑπÔ∏è No SPLASH_BG provided, skipping background download"
          fi
        
          flutter pub get
          echo "‚úÖ Completed: Splash assets downloaded"
          
          else
          echo "‚è≠Ô∏è Skipping splash asset download (IS_SPLASH != true)"
          fi
    

    - &Inject_Firebase_iOS_Push
      name: Firebase Push Notification Setup for iOS
      script: |
        if [ "$PUSH_NOTIFY" = "true" ]; then
          echo "üîî Enabling Firebase Push Notifications for iOS..."
        
          # 1. Download and apply Firebase config
          mkdir -p firebase/ios
          if [ -n "$firebase_config_ios" ]; then
            wget -O firebase/ios/GoogleService-Info.plist "$firebase_config_ios"
          fi
        
          if [ -f "firebase/ios/GoogleService-Info.plist" ]; then
            cp firebase/ios/GoogleService-Info.plist ios/Runner/GoogleService-Info.plist
            echo "‚úÖ GoogleService-Info.plist copied."
          else
            echo "‚ùå Missing GoogleService-Info.plist. Cannot proceed with Firebase setup."
            exit 1
          fi
        
          # 2. Add Firebase SDK (via committed Package.resolved)
          if [ -f "firebase/ios/Package.resolved" ]; then
            mkdir -p ios/Runner.xcodeproj/project.xcworkspace/xcshareddata/swiftpm/
            cp firebase/ios/Package.resolved ios/Runner.xcodeproj/project.xcworkspace/xcshareddata/swiftpm/Package.resolved
            echo "üì¶ Firebase SDK resolved from committed Package.resolved."
          else
            echo "‚ö†Ô∏è Package.resolved not found. Firebase SDK must be added manually in Xcode."
          fi
        
          # 3. Download APNs Auth Key if provided (Optional)
          if [ -n "$APNS_AUTH_KEY_URL" ]; then
            wget -O firebase/ios/AuthKey.p8 "$APNS_AUTH_KEY_URL"
            echo "üì• Downloaded AuthKey.p8 for APNs"
          fi
        
          # 4. Check APNs entitlements
          if grep -q "aps-environment" ios/Runner/Runner.entitlements; then
            echo "‚úÖ APNs entitlements already enabled."
          else
            echo "‚ö†Ô∏è Warning: Missing APNs entitlement in Runner.entitlements."
          fi
        else
          echo "üö´ PUSH_NOTIFY is false. Skipping Firebase push notification setup for iOS."
          rm -f ios/Runner/GoogleService-Info.plist
          rm -f ios/Runner.xcodeproj/project.xcworkspace/xcshareddata/swiftpm/Package.resolved
          echo "üßπ Cleaned up Firebase iOS config."
        fi

    - &get_json
      name: Get JSON file
      script: |
        if [ "$PUSH_NOTIFY" = "true" ]; then
           echo "üì• Downloading google-services.json..."
           wget -O android/app/google-services.json "$firebase_config_android"
           wget -O assets/google-services.json "$firebase_config_android"
         else
           echo "üö´ Firebase config skipped (PUSH_NOTIFY is not true)"
         fi

    - &Inject_Firebase
      name: Inject Firebase and buildscript block
      script: |
        if [ "$PUSH_NOTIFY" = "true" ]; then
          echo "üì¶ Enabling Firebase integration..."

          # Check if Firebase classpath is already present
          if ! grep -q 'com.google.gms:google-services' android/build.gradle; then
            echo "‚úÖ Firebase classpath not found, injecting..."

            if ! grep -q 'buildscript {' android/build.gradle; then
              # No buildscript block found ‚Äì inject the entire block at the top
              sed -i '1s;^;buildscript {\n  repositories {\n    google()\n    mavenCentral()\n  }\n  dependencies {\n    classpath "com.google.gms:google-services:4.3.15"\n  }\n}\n\n;' android/build.gradle
              echo "‚úÖ Full buildscript block injected"
            else
              # buildscript exists ‚Äì insert the classpath into the dependencies
              sed -i '/buildscript {/,/}/ s/dependencies {/dependencies {\n    classpath "com.google.gms:google-services:4.3.15"/' android/build.gradle
              echo "‚úÖ Firebase classpath inserted into existing buildscript"
            fi
          else
            echo "‚úÖ Firebase classpath already present, skipping injection"
          fi
        else
          echo "üö´ Firebase config skipped (PUSH_NOTIFY is not true)"
        fi

    - &Update_SDK_Version
      name: Updating SDK Version for Android & iOS (Conditional)
      script: |
          if [ "$PUSH_NOTIFY" = "true" ]; then
            echo "üîß Updating Android and iOS SDK versions..."
          
            # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Android SDK Versions ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
            echo "üì± Updating Android minSdkVersion and targetSdkVersion in build.gradle"
            sed -i.bak 's/minSdkVersion\s*=.*$/minSdkVersion 21/' android/app/build.gradle
            sed -i.bak 's/targetSdkVersion\s*=.*$/targetSdkVersion 34/' android/app/build.gradle
            echo "‚úÖ Android SDK versions updated"
          
            # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ iOS Minimum Target Version ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
            echo "üçè Updating iOS minimum deployment target in Podfile..."
            PODFILE_PATH="ios/Podfile"
          
            if [ -f "$PODFILE_PATH" ]; then
              sed -i.bak -E "s/platform :ios, '[0-9.]+'/platform :ios, '12.0'/" "$PODFILE_PATH"
              echo "‚úÖ iOS minimum deployment target updated to 12.0"
            else
              echo "‚ö†Ô∏è Podfile not found. Skipping iOS deployment target update."
            fi
          
            # Optional: iOS project.pbxproj iOS Deployment Target
            IOS_PROJECT_FILE="ios/Runner.xcodeproj/project.pbxproj"
            if [ -f "$IOS_PROJECT_FILE" ]; then
              sed -i'' -e "s/IPHONEOS_DEPLOYMENT_TARGET = .*;/IPHONEOS_DEPLOYMENT_TARGET = 12.0;/" "$IOS_PROJECT_FILE"
              echo "‚úÖ Xcode project iOS deployment target updated to 12.0"
            fi
          else
            echo "üö´ SDK version update skipped (PUSH_NOTIFY is not true)"
          fi

    - &Update_App_Version
      name: Inject Version Info into pubspec, build.gradle (Android) & Xcode project (iOS)
      script: |
          echo "üîÑ Updating version to ${VERSION_NAME}+${VERSION_CODE}"
          
          # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ pubspec.yaml ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
          sed -i'' -e "s/^version: .*/version: ${VERSION_NAME}+${VERSION_CODE}/" pubspec.yaml
          echo "‚úÖ Updated pubspec.yaml"
          
          # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Android build.gradle ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
          echo "üîß Updating Android build.gradle..."
          sed -i'' -e "s/versionCode.*/versionCode ${VERSION_CODE}/" android/app/build.gradle
          sed -i'' -e "s/versionName \".*\"/versionName \"${VERSION_NAME}\"/" android/app/build.gradle
          echo "‚úÖ Android version updated: $VERSION_NAME ($VERSION_CODE)"
          
          # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ iOS: project.pbxproj ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
          echo "üçè Updating iOS version info in project.pbxproj..."
          IOS_PROJECT_FILE="ios/Runner.xcodeproj/project.pbxproj"
          
          if [ -f "$IOS_PROJECT_FILE" ]; then
            sed -i'' -e "s/MARKETING_VERSION = .*;/MARKETING_VERSION = ${VERSION_NAME};/" "$IOS_PROJECT_FILE"
            sed -i'' -e "s/CURRENT_PROJECT_VERSION = .*;/CURRENT_PROJECT_VERSION = ${VERSION_CODE};/" "$IOS_PROJECT_FILE"
            echo "‚úÖ iOS version updated: $VERSION_NAME ($VERSION_CODE)"
          else
            echo "‚ùå iOS project file not found at $IOS_PROJECT_FILE"
            exit 1
          fi

    

    - &key_store
      name: Setup Android keystore and insert Gradle signing block
      script: |
        echo "‚úÖ Downloading keystore..."
        curl -o android/app/keystore.jks "$KEY_STORE"
    
        echo "‚úÖ Writing key.properties..."
        cat > android/key.properties <<EOF
        storeFile=keystore.jks
        storePassword=$CM_KEYSTORE_PASSWORD
        keyAlias=$CM_KEY_ALIAS
        keyPassword=$CM_KEY_PASSWORD
        EOF

    - &update_package_names
      name: Update Android & iOS Package Name / Bundle ID
      script: |
        echo "üîß Updating Android and iOS package name (bundle ID)..."
        
        # Validate package/bundle ID format (Java-style, dot-separated)
        if [[ ! "$PKG_NAME" =~ ^[a-zA-Z_][a-zA-Z0-9_]*(\.[a-zA-Z_][a-zA-Z0-9_]*)+$ ]]; then
        echo "‚ùå ERROR: Invalid package/bundle identifier: $PKG_NAME"
        exit 1
        fi
        
        echo "‚úî Package name / Bundle ID: $PKG_NAME"
        
               echo "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ ANDROID UPDATE ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
               echo "üì¶ Updating Android package..."
               flutter pub run rename setBundleId --value "$PKG_NAME"
        
               # Update AndroidManifest.xml
               sed -i "s/package=\"[^\"]*\"/package=\"$PKG_NAME\"/g" android/app/src/main/AndroidManifest.xml
               # For macOS: sed -i '' ...
               sed -i "s/applicationId \"[^\"]*\"/applicationId \"$PKG_NAME\"/g" android/app/build.gradle
        
               echo "‚úÖ Android package updated."
        
               echo "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ iOS UPDATE ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
               echo "üçè Updating iOS bundle identifier..."
               IOS_PROJECT_PATH="ios/Runner.xcodeproj/project.pbxproj"
        
               if [ -f "$IOS_PROJECT_PATH" ]; then
                 sed -i "s/PRODUCT_BUNDLE_IDENTIFIER = .*;/PRODUCT_BUNDLE_IDENTIFIER = $PKG_NAME;/g" "$IOS_PROJECT_PATH"
                 echo "‚úÖ iOS bundle identifier updated."
               else
                 echo "‚ùå iOS project file not found at $IOS_PROJECT_PATH"
                 exit 1
               fi         

    - &build_ipa
      name: Building iOS App with Feature Flags
      script: |
        echo "‚úÖ Building iOS IPA..."
        flutter build ipa --release $flutter_build_flags > flutter_build.log
        echo "‚úÖ IPA build completed."

    - &build_apk
      name: Building Apk with Feature Flags
      script: |
        echo "‚úÖ Building APK..."
        flutter build apk --release $flutter_build_flags > flutter_build.log
        echo "‚úÖ APK build completed."

        echo "‚úÖ Building AppBundle..."
        flutter build appbundle --release $flutter_build_flags > flutter_build2.log
        echo "‚úÖ AppBundle build completed."

    - &Enable_Admob: echo "Enabling Admob"
    - &Enable_GoogleAnalytics: echo "Enabling Google Analytics"
    - &Enable_AppleLogin: echo "Enabling Apple Sign-In"
    - &Enable_GoogleLogin: echo "Enabling Google Sign-In"
    - &Enable_2FA: echo "Enabling Two-Factor Authentication"
    - &Enable_BottomNav: echo "Enabling Bottom Navigation"
    - &Enable_AppScreenshot: echo "Enabling Screenshot Functionality"
    - &Enable_PullToRefresh: echo "Enabling Pull to Refresh"
    - &Enable_LoadingIndicators: echo "Enabling Loading Indicators"
    - &Enable_DeepLinking: echo "Enabling Deep Linking"
    - &Enable_AdvancedPermissions: echo "Requesting advanced permissions (GPS, Camera, etc.)"

workflows:
  android-workflow:
    name: Android Workflow
    max_build_duration: 30
    instance_type: mac_mini_m2
    environment:
      flutter: stable
      xcode: latest
    scripts:
      - *debug_env
      - *get_logo
      - *set_launcher_icons
      - *change_app_name
      - *get_splash
      - *Update_App_Version
      - *update_package_names
      - *Update_SDK_Version
      - *get_json
      - *Inject_Firebase
      - *key_store
      - *build_apk
    artifacts:
      - *android_apk
      - *android_abb
      - flutter_build.log
      - flutter_build2.log
      - fcm_token.txt
    publishing: *email_release

  ios-workflow:
    name: ios Workflow
    max_build_duration: 30
    instance_type: mac_mini_m2
    environment:
      flutter: stable
      xcode: latest
    scripts:
      - *debug_env
      - *get_logo
      - *set_launcher_icons
      - *change_app_name
      - *get_splash
      - *Update_App_Version
      - *update_package_names
      - *Update_SDK_Version
      - *Inject_Firebase_iOS_Push
      - *build_ipa
    artifacts:
      - *ios_app
      - flutter_build.log
      - fcm_token.txt

    publishing: *email_release

  free-apk-workflow:
    name: Free APK Workflow
    max_build_duration: 30
    instance_type: mac_mini_m1
    environment:
      flutter: stable
    scripts:
      - *pub_get
      - *debug_env
      - *Update_App_Version
      - *update_package_names
      - *get_logo
      - *set_launcher_icons
      - *get_splash
      - *change_app_name
      - *Update_SDK_Version
      - *build_apk
    artifacts:
      - *android_apk
    publishing: *email_release

  paid-apk-workflow:
    name: Paid APK Workflow
    max_build_duration: 45
    instance_type: mac_mini_m2
    environment:
      flutter: stable
    scripts:
      - *pub_get
      - *debug_env
      - *key_store
      - *Update_App_Version
      - *update_package_names
      - *get_logo
      - *set_launcher_icons
      - *get_splash
      - *change_app_name
      - *Inject_Firebase           # Push Notification
      - *Enable_Admob              # Admob
      - *Enable_GoogleAnalytics    # Google Analytics
      - *Enable_AppleLogin         # Apple login
      - *Enable_GoogleLogin        # Google login
      - *Enable_2FA                # Two-factor authentication
      - *Enable_BottomNav          # Bottom navigation bar
      - *Enable_AppScreenshot      # Screenshot functionality
      - *Enable_PullToRefresh
      - *Enable_LoadingIndicators
      - *Enable_DeepLinking
      - *Enable_AdvancedPermissions  # GPS, Camera, etc.
      - *Update_SDK_Version
      - *build_apk
    artifacts:
      - *android_apk
    publishing: *email_release
